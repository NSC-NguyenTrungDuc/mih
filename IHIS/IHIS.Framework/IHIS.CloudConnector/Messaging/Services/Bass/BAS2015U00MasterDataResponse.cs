//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: input.proto
using System.Collections.Generic;
namespace IHIS.CloudConnector.Messaging
{

  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"BAS2015U00MasterDataResponse")]
  public partial class BAS2015U00MasterDataResponse : global::ProtoBuf.IExtensible
  {
    public BAS2015U00MasterDataResponse() {}
    
    private KinkiType _kinki_type;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"kinki_type", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public KinkiType kinki_type
    {
      get { return _kinki_type; }
      set { _kinki_type = value; }
    }
      private List<byte[]> _data = null;
    [global::ProtoBuf.ProtoMember(2, IsRequired = false, Name=@"data", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue(null)]
    public List<byte[]> data
    {
      get { return _data; }
      set { _data = value; }
    }
    private string _msg = "";
    [global::ProtoBuf.ProtoMember(3, IsRequired = false, Name=@"msg", DataFormat = global::ProtoBuf.DataFormat.Default)]
    [global::System.ComponentModel.DefaultValue("")]
    public string msg
    {
      get { return _msg; }
      set { _msg = value; }
    }
    private bool _result;
    [global::ProtoBuf.ProtoMember(4, IsRequired = true, Name=@"result", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public bool result
    {
      get { return _result; }
      set { _result = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
}
