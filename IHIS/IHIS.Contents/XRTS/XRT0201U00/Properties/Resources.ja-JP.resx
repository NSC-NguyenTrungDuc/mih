<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CAP_001" xml:space="preserve">
    <value>保存完了</value>
  </data>
  <data name="CAP_002" xml:space="preserve">
    <value>保存失敗</value>
  </data>
  <data name="fwkActorFormText" xml:space="preserve">
    <value>実施者照会</value>
  </data>
  <data name="fwkActorFormText2" xml:space="preserve">
    <value>放射線技師一覧</value>
  </data>
  <data name="fwkActorHeader2" xml:space="preserve">
    <value>実施者ID</value>
  </data>
  <data name="fwkActorHeader3" xml:space="preserve">
    <value>実施者名</value>
  </data>
  <data name="lbPaceMaker" xml:space="preserve">
    <value>ペースメーカー</value>
  </data>
  <data name="MSG_001" xml:space="preserve">
    <value>正常に保存されました。</value>
  </data>
  <data name="MSG_002" xml:space="preserve">
    <value>保存に問題が発生しました。</value>
  </data>
  <data name="ord_danui" xml:space="preserve">
    <value>オーダ単位</value>
  </data>
  <data name="ord_danui_name" xml:space="preserve">
    <value>オーダ単位名</value>
  </data>
  <data name="SMS_TRIAL" xml:space="preserve">
    <value>実験患者</value>
  </data>
  <data name="XMessageBox_Caption1" xml:space="preserve">
    <value>患者案内確認</value>
  </data>
  <data name="XMessageBox_Caption11" xml:space="preserve">
    <value>実施取消処理確認</value>
  </data>
  <data name="XMessageBox_caption12" xml:space="preserve">
    <value>転送確認</value>
  </data>
  <data name="XMessageBox_caption2" xml:space="preserve">
    <value>確認</value>
  </data>
  <data name="XMessageBox_caption3" xml:space="preserve">
    <value>担当技師確認</value>
  </data>
  <data name="XMessageBox_caption4" xml:space="preserve">
    <value>実施確認</value>
  </data>
  <data name="XMessageBox_caption6" xml:space="preserve">
    <value>実施チェック確認</value>
  </data>
  <data name="XMessageBox_Caption7" xml:space="preserve">
    <value>확인</value>
  </data>
  <data name="XMessageBox1" xml:space="preserve">
    <value>まだ、診療終了されていません｡ 
撮影が終わったら患者さんを診察室に案内してください!</value>
  </data>
  <data name="XMessageBox10" xml:space="preserve">
    <value>]項目の取消処理を行ってください！</value>
  </data>
  <data name="XMessageBox11" xml:space="preserve">
    <value>実施取消処理は一行ずつ行えます。
先に[</value>
  </data>
  <data name="XMessageBox12" xml:space="preserve">
    <value>を再転送しますか？</value>
  </data>
  <data name="XMessageBox13" xml:space="preserve">
    <value>保存に失敗しました。</value>
  </data>
  <data name="XMessageBox13_caption" xml:space="preserve">
    <value>保存失敗</value>
  </data>
  <data name="XMessageBox2" xml:space="preserve">
    <value>既にオーダが会計に転送されています。</value>
  </data>
  <data name="XMessageBox3" xml:space="preserve">
    <value>担当技師を入力してください。</value>
  </data>
  <data name="XMessageBox4" xml:space="preserve">
    <value>実施処理を行うためには受付にチェックを入れてください！。</value>
  </data>
  <data name="XMessageBox5" xml:space="preserve">
    <value>材料に変更事項があります。保存しますか？</value>
  </data>
  <data name="XMessageBox5_Caption" xml:space="preserve">
    <value>材料変更事項有り</value>
  </data>
  <data name="XMessageBox6" xml:space="preserve">
    <value>実施チェックを入れてください！</value>
  </data>
  <data name="XMessageBox7_JP" xml:space="preserve">
    <value>数量を入力してください。</value>
  </data>
  <data name="XMessageBox7_Ko" xml:space="preserve">
    <value>수량을 입력해 주세요</value>
  </data>
  <data name="XMessageBox8" xml:space="preserve">
    <value>材料が修正されました。削除してから登録してください。</value>
  </data>
  <data name="XMessageBox9" xml:space="preserve">
    <value>受付取消処理は一行ずつ行えます。
先に[</value>
  </data>
  <data name="XMessageBox9_caption" xml:space="preserve">
    <value>受付取消処理確認</value>
  </data>
</root>