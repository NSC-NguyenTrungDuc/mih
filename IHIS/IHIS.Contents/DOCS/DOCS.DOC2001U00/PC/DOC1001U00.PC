/*
 *
 * 1. System  ID   : DOC
 * 2. Product ID   : DOCS50
 * 3. Service ID   : DOC1001U00.pc
 * 4. Service Name : 제증명요청관리
 * 5. 관련Client   : DOCS.DOC1001U00
 * 6. 관련테이블   : DOC1001
 * 7. 기능         : 제증명요청을 관리한다.
 * 8. 작성자       : 이동국
 * 9. 작성일       : 2006.02.06
 *10. 수정History  :
 *
 */
 
#include "commsvc.h"    /* COMMON HEADER */

int DOC1001U00_FKINP1001QUERY(msg_in_st *MessageIn, msg_out_st *MessageOut);
int DOC1001U00_CERTJNNMQUERY(msg_in_st *MessageIn, msg_out_st *MessageOut);
int DOC1001U00_HODONGBUNHOLIST(msg_in_st *MessageIn, msg_out_st *MessageOut);
int DOC1001U00_PKDOC1001QUERY(msg_in_st *MessageIn, msg_out_st *MessageOut);
int DOC1001U00_DOC1001QUERY(msg_in_st *MessageIn, msg_out_st *MessageOut);
int DOC1001U00_VALIDATIONCHK(msg_in_st *MessageIn, msg_out_st *MessageOut);
int DOC1001U00_DOC1001UPDATE(msg_in_st *MessageIn, msg_out_st *MessageOut);

void DOC1001U00(TPSVCINFO *transb)
{
    /* LOCAL VALUES */
    int  rtn = 0;

    msg_in_st        *MessageIn;
    msg_out_st       *MessageOut;

    /* Service Start */
    if (service_start(transb, &MessageIn, &MessageOut) < 0)
        return;

    /* WORK DIVISION */
    switch(MessageIn->work_tp)
    {
        case 'P':    /* FKINP1001 QUERY */
            rtn = DOC1001U00_FKINP1001QUERY(MessageIn,MessageOut);
            break;
        case '1':    /* CERT_JNNM LIST QUERY */
            rtn = DOC1001U00_CERTJNNMQUERY(MessageIn,MessageOut);
            break;
        case '2':    /* HO_DONG BUNHO LIST QUERY */
            rtn = DOC1001U00_HODONGBUNHOLIST(MessageIn,MessageOut);
            break;
        case '3':    /* PKDOC1001 QUERY */
            rtn = DOC1001U00_PKDOC1001QUERY(MessageIn,MessageOut);
            break;
        case 'Q':    /* DOC1001 QUERY */
            rtn = DOC1001U00_DOC1001QUERY(MessageIn,MessageOut);
            break;
        case 'V':    /* DOC1001 QUERY */
            rtn = DOC1001U00_VALIDATIONCHK(MessageIn,MessageOut);
            break;
        case 'U':    /* DOC1001 UPDATE */
            rtn = DOC1001U00_DOC1001UPDATE(MessageIn,MessageOut);
            break;
        default:     /* WORK DIVISION ERROR */
            rtn = SysErr(MessageOut, "99999", "WORK DIVISION ERROR", NULL, 0);
            break;
    }
    service_end(rtn, MessageOut);
}

/*
 * 목적     : 환자의 입원키, 기본정보를 조회한다.
 * 입력     : BUNHO
 * 출력     : 
 * 작성일자 : 2006년 02월 06 월요일
 */
int DOC1001U00_FKINP1001QUERY(MessageIn, MessageOut)
msg_in_st    *MessageIn;
msg_out_st   *MessageOut;
{
    /* LOCAL VALUES */
    char    i_bunho   [ 9 + 1];		/* 환자번호 */
    
    char    o_gwa     [10 + 1];		/* 진료과   */
    char    o_gwa_name[30 + 1];		/* 진료과명 */
    char    o_ho_dong [ 4 + 1];		/* 병동     */
    charnum o_fkinp1001       ;		/* 입원키   */
    
    char *sp1, OutData[DATA_SIZE+1024];
    int  idx = 0;

    lprintf("Start DOC1001U00_FKINP1001QUERY \n");

    memset(o_fkinp1001, 0x00, sizeof(o_fkinp1001));
    memset(OutData,     0x00, sizeof(OutData));
    sp1 = MessageIn->data;

    /* InData Parsing */
    sp1 = ParsStr(sp1, TAB, i_bunho);	/* 등록번호     */
    
    if (sp1 == NULL)
        return (SysErr(MessageOut,"99991","Record Parsing Error",NULL,0));
    
    lprintf("i_bunho = %s\n", i_bunho);
    
    TrimStr(i_bunho);
    
    /* 환자의 입원키를 조회한다. */
    EXEC SQL
    SELECT A.GWA                                GWA
          ,FN_BAS_LOAD_GWA_NAME(A.GWA, SYSDATE) GWA_NAME
          ,A.HO_DONG1                           HO_DONG
          ,A.PKINP1001                          PKINP1001
      INTO :o_gwa
          ,:o_gwa_name
          ,:o_ho_dong
          ,:o_fkinp1001
      FROM VW_OCS_INP1001 A
     WHERE A.IPWON_TYPE           IN ('0','1')
       AND NVL(A.CANCEL_YN,'N')   = 'N'
       AND NVL(A.JAEWON_FLAG,'N') = 'Y'
       AND A.BUNHO                = :i_bunho;

    lprintf("sqlca.sqlcode : %d\n", sqlca.sqlcode);
       
    if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != EXC_COLUMN_NULL) &&(sqlca.sqlcode != EXC_NO_DATA_FOUND))
        return (SqlMsgErr(MessageOut, sqlca.sqlerrm.sqlerrmc, sizeof(sqlca.sqlerrm.sqlerrmc), "1", 0 ));
           
    TrimStr(o_fkinp1001);
    
    lprintf("o_gwa       : %s\n", o_gwa      );
    lprintf("o_gwa_name  : %s\n", o_gwa_name );
    lprintf("o_ho_dong   : %s\n", o_ho_dong  );
    lprintf("o_fkinp1001 : %s\n", o_fkinp1001);
    
    r_rec_cnt++;

    ConcatStr(OutData, &idx, o_gwa      );
    ConcatStr(OutData, &idx, o_gwa_name );
    ConcatStr(OutData, &idx, o_ho_dong  );
    ConcatStr(OutData, &idx, o_fkinp1001);
    ConcatRec(OutData, &idx); /* Record 구분자 */
    
    if (CheckQryBuff(MessageOut->data, OutData, &r_rec_cnt, q_rec_cnt))
    {
        r_retv_tp = '1';
    }

    lprintf("...outdata[%s]...\n",OutData);
    lprintf("End DOC1001U00_FKINP1001QUERY \n");

    return 0;
}

/*
 * 목적     : 제증명리스트를 조회한다.
 * 입력     : 
 * 출력     : 
 * 작성일자 : 2006년 02월 06 화요일
 */
int DOC1001U00_CERTJNNMQUERY(MessageIn, MessageOut)
msg_in_st    *MessageIn;
msg_out_st   *MessageOut;
{
    /* LOCAL VALUES */
    char    o_cert_jnnm[100 + 1];	/* 제증명명   */
    char    o_cert_jncd[  3 + 1];	/* 제증명코드 */
    
    char *sp1, OutData[DATA_SIZE+1024];
    int  idx = 0;
    
    lprintf("Start DOC1001U00_CERTJNNMQUERY \n");
    
    memset(OutData, 0x00, sizeof(OutData));
    sp1 = MessageIn->data;
   
    /* 제증명리스트를 조회한다. */ 
    EXEC SQL DECLARE DOC1001U00_CERTJNNMQUERY CURSOR FOR
    SELECT A.CERT_JNNM CERT_JNNM
          ,A.CERT_JNCD CERT_JNCD
      FROM DOC0101 A
     WHERE A.CERT_VALD = 'Y'
       AND A.CERT_RQGB = 'I'
       AND A.CERT_JNCD >= NVL(:q_cont_key, '0')
     ORDER BY 2;
     
    EXEC SQL OPEN DOC1001U00_CERTJNNMQUERY;
    
    for( ; ; )
    {
        EXEC SQL FETCH DOC1001U00_CERTJNNMQUERY INTO
            :o_cert_jnnm,
            :o_cert_jncd;
            
        if (sqlca.sqlcode == EXC_NO_DATA_FOUND) break;
        if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != EXC_COLUMN_NULL))
        {
            EXEC SQL CLOSE DOC1001U00_CERTJNNMQUERY;
            return (SqlErr(MessageOut,NULL, 0));
        }
        
        r_rec_cnt++;

        /* OutData Create */
        ConcatStr(OutData, &idx, o_cert_jnnm);
        ConcatStr(OutData, &idx, o_cert_jncd);
        ConcatRec(OutData, &idx);

        /* OutData Size가 MessageOut Data Packet Size보다 크면 break */
        if (CheckQryBuff(MessageOut->data, OutData, &r_rec_cnt, q_rec_cnt))
        {
            r_retv_tp = '1';
            strcpy(r_cont_key, o_cert_jncd);
            break;
        }
    }
    EXEC SQL CLOSE DOC1001U00_CERTJNNMQUERY;

    lprintf("End DOC1001U00_CERTJNNMQUERY Query\n");

    return 0;
}

/*
 * 목적     : 병동의 환자리스트를 조회한다
 * 입력     : HO_DONG
 * 출력     : 
 * 작성일자 : 2006년 02월 07 화요일
 */
int DOC1001U00_HODONGBUNHOLIST(MessageIn, MessageOut)
msg_in_st    *MessageIn;
msg_out_st   *MessageOut;
{
    /* LOCAL VALUES */
    char    i_ho_dong     [ 4 + 1];	/* 병동     */
   
    char    o_ho_dong     [ 4 + 1];	/* 병동     */
    char    o_ho_dong_name[40 + 1];	/* 병동명   */
    char    o_suname      [40 + 1];	/* 환자명   */
    char    o_bunho       [ 9 + 1];	/* 환자번호 */	
    char    o_gwa         [10 + 1];	/* 과       */
    char    o_gwa_name    [30 + 1];	/* 과명     */
    
    char    o_key         [55 + 1];	/* 연속키   */
    
    char    *sp1, OutData[DATA_SIZE+1024];
    int     idx = 0;
    
    lprintf("Start DOC1001U00_HODONGBUNHOLIST \n");
    
    memset(OutData, 0x00, sizeof(OutData));
    sp1 = MessageIn->data;
    
    /* InData Parsing */
    sp1 = ParsStr(sp1, TAB, i_ho_dong);		/* 병동     */
    
    lprintf("i_ho_dong = %s\n", i_ho_dong);
    
    if (sp1 == NULL)
        return (SysErr(MessageOut,"99991","Record Parsing Error",NULL,0));
        
    TrimStr(i_ho_dong);
    
    /* 병동의 환자리스트를 조회한다 */
    EXEC SQL DECLARE DOC1001U00_HODONGBUNHOLIST CURSOR FOR
    SELECT A.HO_DONG1                                    HO_DONG
          ,FN_BAS_LOAD_HO_DONG_NAME(A.HO_DONG1, SYSDATE) HO_DONG_NAME
          ,A.BUNHO||'('||B.SUNAME||')'                   SUNAME
          ,A.BUNHO                                       BUNHO
          ,A.GWA                                         GWA
          ,FN_BAS_LOAD_GWA_NAME(A.GWA, SYSDATE)          GWA_NAME
          ,A.HO_DONG1||A.BUNHO                           KEY
      FROM VW_OCS_INP1001 A, OUT0101 B
     WHERE A.JAEWON_FLAG = 'Y'
       AND A.HO_DONG1 LIKE :i_ho_dong
       AND A.BUNHO    = B.BUNHO
       AND A.BUNHO    >= NVL(:q_cont_key, '0')
     ORDER BY 1, 3;

    EXEC SQL OPEN DOC1001U00_HODONGBUNHOLIST;

    lprintf("sqlca.sqlcode = %d\n",sqlca.sqlcode);
    
    for( ; ; )
    {
        EXEC SQL FETCH DOC1001U00_HODONGBUNHOLIST INTO
            :o_ho_dong     ,
            :o_ho_dong_name,
            :o_suname      ,
            :o_bunho       ,
            :o_gwa         ,
            :o_gwa_name    ,
            :o_key         ;
            
        lprintf("o_ho_dong      = %s\n", o_ho_dong     );
        lprintf("o_ho_dong_name = %s\n", o_ho_dong_name);
        lprintf("o_suname       = %s\n", o_suname      );
        lprintf("o_bunho        = %s\n", o_bunho       );
        lprintf("o_gwa          = %s\n", o_gwa         );
        lprintf("o_gwa_name     = %s\n", o_gwa_name    );
        lprintf("o_key          = %s\n", o_key         );
                                          
        if (sqlca.sqlcode == EXC_NO_DATA_FOUND) break;
        if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != EXC_COLUMN_NULL))
        {                                 
            EXEC SQL CLOSE DOC1001U00_HODONGBUNHOLIST;
            return (SqlErr(MessageOut,NULL, 0));
        }

        r_rec_cnt++;

        /* OutData Create */
        ConcatStr(OutData, &idx, o_ho_dong     );
        ConcatStr(OutData, &idx, o_ho_dong_name);
        ConcatStr(OutData, &idx, o_suname      );
        ConcatStr(OutData, &idx, o_bunho       );
        ConcatStr(OutData, &idx, o_gwa         );
        ConcatStr(OutData, &idx, o_gwa_name    );
        ConcatRec(OutData, &idx);
     
        /* OutData Size가 MessageOut Data Packet Size보다 크면 break */
        if (CheckQryBuff(MessageOut->data, OutData, &r_rec_cnt, q_rec_cnt))
        {
            r_retv_tp = '1';
            strcpy(r_cont_key, o_key);
            break;
        }
    }
    EXEC SQL CLOSE DOC1001U00_HODONGBUNHOLIST;

    lprintf("End DOC1001U00_HODONGBUNHOLIST \n");

    return 0;
}

/*
 * 목적     : 환자의 제증명키를 조회한다.
 * 입력     : BUNHO
 * 출력     : PKDOC1001
 * 작성일자 : 2006년 02월 06 월요일
 */
int DOC1001U00_PKDOC1001QUERY(MessageIn, MessageOut)
msg_in_st    *MessageIn;
msg_out_st   *MessageOut;
{
    /* LOCAL VALUES */
    charnum o_pkdoc1001   ;		/* 제증명키 */
    
    char *sp1, OutData[DATA_SIZE+1024];
    int  idx = 0;

    lprintf("Start DOC1001U00_PKDOC1001QUERY \n");

    memset(o_pkdoc1001, 0x00, sizeof(o_pkdoc1001));
    memset(OutData,     0x00, sizeof(OutData));
    sp1 = MessageIn->data;

    /* 환자의 제증명키를 조회한다. */
    EXEC SQL
    SELECT DOC1001_SEQ.NEXTVAL
      INTO :o_pkdoc1001
      FROM DUAL;

    lprintf("sqlca.sqlcode : %d\n", sqlca.sqlcode);
       
    if (sqlca.sqlcode != 0)
        return (SqlMsgErr(MessageOut, sqlca.sqlerrm.sqlerrmc, sizeof(sqlca.sqlerrm.sqlerrmc), "1", 0 ));
           
    TrimStr(o_pkdoc1001);
    
    lprintf("o_pkdoc1001 : %s\n", o_pkdoc1001);
    
    r_rec_cnt++;

    ConcatStr(OutData, &idx, o_pkdoc1001);
    ConcatRec(OutData, &idx); /* Record 구분자 */
    
    if (CheckQryBuff(MessageOut->data, OutData, &r_rec_cnt, q_rec_cnt))
    {
        r_retv_tp = '1';
    }

    lprintf("...outdata[%s]...\n",OutData);
    lprintf("End DOC1001U00_PKDOC1001QUERY \n");

    return 0;
}

/*
 * 목적     : 환자의 제증명요청건을 조회한다.
 * 입력     : BUNHO, FKINP1001
 * 출력     : 
 * 작성일자 : 2006년 02월 06 화요일
 */
int DOC1001U00_DOC1001QUERY(MessageIn, MessageOut)
msg_in_st    *MessageIn;
msg_out_st   *MessageOut;
{
    /* LOCAL VALUES */
    char    i_bunho         [   9 + 1];	/* 환자번호     */
    charnum i_fkinp1001               ;	/* 입원키       */
    char    i_cert_wrgb     [   1 + 1];	/* 작성구분     */
                                                                    
    char    o_bunho         [   9 + 1];	/* 환자번호     */
    charnum o_pkdoc1001               ;	/* 제증명키     */
    char    o_cert_jncd     [   3 + 1];	/* 제증명코드   */
    char    o_gwa_name      [  30 + 1];	/* 진료과명     */
    char    o_gwa           [  10 + 1];	/* 진료과       */
    chardt  o_cert_rqdt               ;	/* 요청일자     */
    charnum o_cert_seqn               ;	/* 순번         */
    char    o_cert_vald     [   1 + 1];	/* 유효구분     */
    char    o_cert_iogb     [   1 + 1];	/* 입원외래구분 */
    char    o_ho_dong       [   4 + 1];	/* 병동         */
    charnum o_cert_rqnu               ;	/* 요청매수     */
    char    o_cert_bigo     [2000 + 1];	/* 비고사항     */
    charnum o_fkinp1001               ;	/* 입원키       */
    char    o_cert_wrgb_name[ 200 + 1];	/* 작성구분명   */
    char    o_cert_wrgb     [   1 + 1];	/* 작성구분     */  
    
    char *sp1, OutData[DATA_SIZE+1024];
    int  idx = 0;
    
    lprintf("Start DOC1001U00_DOC1001QUERY \n");
    
    memset(OutData, 0x00, sizeof(OutData));
    sp1 = MessageIn->data;
    
    /* InData Parsing */
    sp1 = ParsStr(sp1, TAB, i_bunho    );	/* 환자번호 */
    sp1 = ParsStr(sp1, TAB, i_fkinp1001);	/* 입원키   */
    sp1 = ParsStr(sp1, TAB, i_cert_wrgb);	/* 입원키   */

    lprintf("i_bunho     = %s\n", i_bunho    );
    lprintf("i_fkinp1001 = %s\n", i_fkinp1001);
    lprintf("i_cert_wrgb = %s\n", i_cert_wrgb);
    
    TrimStr(i_bunho    );
    TrimStr(i_fkinp1001);
    TrimStr(i_cert_wrgb);
    
    EXEC SQL DECLARE DOC1001U00_DOC1001QUERY CURSOR FOR
    SELECT A.BUNHO                                          BUNHO
          ,A.PKDOC1001                                      PKDOC1001
          ,A.CERT_JNCD                                      CERT_JNCD
          ,FN_BAS_LOAD_GWA_NAME(A.GWA, SYSDATE)             GWA_NAME
          ,A.GWA                                            GWA
          ,A.CERT_RQDT                                      CERT_RQDT
          ,A.CERT_SEQN                                      CERT_SEQN
          ,A.CERT_VALD                                      CERT_VALD
          ,A.CERT_IOGB                                      CERT_IOGB
          ,A.HO_DONG                                        HO_DONG
          ,A.CERT_RQNU                                      CERT_RQNU
          ,A.CERT_BIGO                                      CERT_BIGO
          ,A.FKINP1001                                      FKINP1001
          ,FN_NUR_LOAD_CODE_NAME('CERT_GUBUN', A.CERT_WRGB) CERT_WRGB_NAME
          ,A.CERT_WRGB                                      CERT_WRGB
      FROM DOC1001 A
     WHERE A.BUNHO     = :i_bunho
       AND A.FKINP1001 = :i_fkinp1001
       AND ((:i_cert_wrgb = 'A') 
       OR   (:i_cert_wrgb = 'R' AND A.CERT_WRGB = 'R')
       OR   (:i_cert_wrgb = 'E' AND A.CERT_WRGB = 'E'))
       AND A.CERT_VALD = 'Y'
       AND A.PKDOC1001 >= NVL(:q_cont_key, '0')
     ORDER BY 2, 3;
     
    EXEC SQL OPEN DOC1001U00_DOC1001QUERY;
    
    for( ; ; )
    {
        EXEC SQL FETCH DOC1001U00_DOC1001QUERY INTO
            :o_bunho         ,
            :o_pkdoc1001     ,
            :o_cert_jncd     ,
            :o_gwa_name      ,
            :o_gwa           ,
            :o_cert_rqdt     ,
            :o_cert_seqn     ,
            :o_cert_vald     ,
            :o_cert_iogb     ,
            :o_ho_dong       ,
            :o_cert_rqnu     ,
            :o_cert_bigo     ,
            :o_fkinp1001     ,
            :o_cert_wrgb_name,
            :o_cert_wrgb     ;
            
        if (sqlca.sqlcode == EXC_NO_DATA_FOUND) break;
        if ((sqlca.sqlcode != 0) && (sqlca.sqlcode != EXC_COLUMN_NULL))
        {
            EXEC SQL CLOSE DOC1001U00_DOC1001QUERY;
            return (SqlErr(MessageOut,NULL, 0));
        }
        
        r_rec_cnt++;

        /* OutData Create */
        ConcatStr(OutData, &idx, o_bunho         );
        ConcatStr(OutData, &idx, o_pkdoc1001     );
        ConcatStr(OutData, &idx, o_cert_jncd     );
        ConcatStr(OutData, &idx, o_gwa_name      );
        ConcatStr(OutData, &idx, o_gwa           );
        ConcatStr(OutData, &idx, o_cert_rqdt     );
        ConcatStr(OutData, &idx, o_cert_seqn     );
        ConcatStr(OutData, &idx, o_cert_vald     );
        ConcatStr(OutData, &idx, o_cert_iogb     );
        ConcatStr(OutData, &idx, o_ho_dong       );
        ConcatStr(OutData, &idx, o_cert_rqnu     );
        ConcatFix5(OutData, &idx, o_cert_bigo    );
        ConcatStr(OutData, &idx, o_fkinp1001     );
        ConcatStr(OutData, &idx, o_cert_wrgb_name);
        ConcatStr(OutData, &idx, o_cert_wrgb     );
        ConcatRec(OutData, &idx);

        /* OutData Size가 MessageOut Data Packet Size보다 크면 break */
        if (CheckQryBuff(MessageOut->data, OutData, &r_rec_cnt, q_rec_cnt))
        {
            r_retv_tp = '1';
            strcpy(r_cont_key, o_pkdoc1001);
            break;
        }
    }
    EXEC SQL CLOSE DOC1001U00_DOC1001QUERY;

    lprintf("End DOC1001U00_DOC1001QUERY Query\n");

    return 0;
}

/*
 * 목적     : DOC1001의 중복체크를 한다.
 * 입력     : 
 * 출력     : 중복여부
 * 작성일자 : 2006년 02월 07 화요일
 */
int DOC1001U00_VALIDATIONCHK(MessageIn, MessageOut)
msg_in_st    *MessageIn;
msg_out_st   *MessageOut;
{
    /* LOCAL VALUES */
    char    i_bunho    [ 9 + 1];	/* 환자번호     */
    charnum i_pkdoc1001        ;	/* 제증명키     */
    char    i_cert_jncd[ 3 + 1];	/* 제증명코드   */
    char    i_gwa      [10 + 1];	/* 진료과       */
    chardt  i_cert_rqdt        ;	/* 요청일자     */
    charnum i_cert_seqn        ;	/* 순번         */
   
    char    o_dup_chck [1 + 1];		/* 중복여부     */

    int     i, svcm = 0;
    char    *rec, *sp1, OutData[DATA_SIZE+1024];
    int     idx = 0;
    
    lprintf("Start DOC1001U00_VALIDATIONCHK\n");

    memset(OutData,     0x00, sizeof(OutData));
    memset(o_dup_chck,  0x00, sizeof(o_dup_chck));
    sp1 = MessageIn -> data;

    /* Parsing... */
    sp1 = ParsStr(sp1, TAB, i_bunho    );
    sp1 = ParsStr(sp1, TAB, i_pkdoc1001);
    sp1 = ParsStr(sp1, TAB, i_cert_jncd);
    sp1 = ParsStr(sp1, TAB, i_gwa      );
    sp1 = ParsStr(sp1, TAB, i_cert_rqdt);
    sp1 = ParsStr(sp1, TAB, i_cert_seqn);
  
    lprintf("i_bunho     : [%s]...\n", i_bunho    );
    lprintf("i_pkdoc1001 : [%s]...\n", i_pkdoc1001);
    lprintf("i_cert_jncd : [%s]...\n", i_cert_jncd);
    lprintf("i_gwa       : [%s]...\n", i_gwa      );
    lprintf("i_cert_rqdt : [%s]...\n", i_cert_rqdt);
    lprintf("i_cert_seqn : [%s]...\n", i_cert_seqn);
    
    if(atoi(i_cert_seqn) == 0)
    {
    	/* 순번을 찾는다 */
    	EXEC SQL
    	SELECT NVL(MAX(CERT_SEQN) + 1, 1) CERT_SEQN
          INTO :i_cert_seqn
          FROM DOC1001
         WHERE BUNHO     = :i_bunho
           AND PKDOC1001 = :i_pkdoc1001
           AND CERT_JNCD = :i_cert_jncd
           AND GWA       = :i_gwa
           AND CERT_RQDT = TO_DATE(:i_cert_rqdt, 'YYYY/MM/DD');
    
        if (sqlca.sqlcode != 0)
            return (SqlErr(MessageOut, NULL, 1));
            
        lprintf("i_cert_seqn : [%s]...\n", i_cert_seqn);
    }
    
    /* DOC1001 Validation Check */
    EXEC SQL
    SELECT 'Y'
      INTO :o_dup_chck
      FROM DUAL
     WHERE EXISTS (SELECT 'X'
                     FROM DOC1001
                    WHERE BUNHO     = :i_bunho
                      AND CERT_JNCD = :i_cert_jncd
                      AND GWA       = :i_gwa
                      AND CERT_RQDT = TO_DATE(:i_cert_rqdt, 'YYYY/MM/DD')
                      AND CERT_SEQN = :i_cert_seqn
                      AND CERT_VALD = 'Y');
    
    lprintf("sqlca.sqlcode : [%d]...\n", sqlca.sqlcode);

    if (sqlca.sqlcode != 0 && sqlca.sqlcode != EXC_NO_DATA_FOUND)
        return (SqlErr(MessageOut, NULL, 1));

    lprintf("o_dup_chck : [%s]\n", o_dup_chck);

    TrimStr(o_dup_chck);

    r_rec_cnt++;

    ConcatStr(OutData, &idx, o_dup_chck);
    ConcatRec(OutData, &idx); /* Record 구분자 */

    lprintf("...outdata[%s]...\n",OutData);

    if (CheckQryBuff(MessageOut->data, OutData, &r_rec_cnt, q_rec_cnt))
    {
        r_retv_tp = '1';
    }

    lprintf("End DOC1001U00_VALIDATIONCHK\n");

    return 0;
}

/*
 * 목적     : DOC1001를 저장한다.
 * 입력     : 
 * 출력     :
 * 작성일자 : 2006년 02월 08 수요일
 */
int DOC1001U00_DOC1001UPDATE(MessageIn, MessageOut)
msg_in_st    *MessageIn;
msg_out_st   *MessageOut;
{
    /* LOCAL VALUES */
    char    i_bunho    [   9 + 1];	/* 환자번호   */
    charnum i_pkdoc1001          ;	/* 제증명키   */
    char    i_cert_jncd[   3 + 1];	/* 제증명코드 */
    char    i_gwa      [  10 + 1];	/* 진료과     */
    chardt  i_cert_rqdt          ;	/* 요청일자   */
    charnum i_cert_seqn          ;	/* 순번       */
    char    i_ho_dong  [   4 + 1];	/* 병동       */
    charnum i_cert_rqnu          ;	/* 요청매수   */
    char    i_cert_bigo[2000 + 1];	/* 비고사항   */
    charnum i_fkinp1001          ;	/* 입원키     */
    char    i_cert_wrgb[   1 + 1];    	/* 작성구분   */
    
    char    o_dup_chck     [1 + 1];	/* 중복체크   */
    
    int    i, svcm = 0, idx = 0;
    char   *rec, *sp1;
    char   i_chk[1 + 1];
    
    lprintf("Start DOC1001U00_DOC1001UPDATE\n");
    
    rec = MessageIn->data;
    
    /* InData Parsing & I/U/D Work Division loop */
    for ( i = 0; i < q_rec_cnt; i++ )
    {
        if ( i > 0 ) rec = strstr(rec, TAB_CRNL) + 3;
        
        /* 대상 Table단위 작업 */
        switch (rec[0])
        {
            case '1':       /* DOC1001 */
            	lprintf("Start DOC1001 SAVE\n");
            
            	/* Record Parsing */
            	sp1 = rec + 2;
            	sp1 = ParsStr(sp1, TAB, i_bunho    );
            	sp1 = ParsStr(sp1, TAB, i_pkdoc1001);
            	sp1 = ParsStr(sp1, TAB, i_cert_jncd);
            	sp1 = ParsStr(sp1, TAB, i_gwa      );
            	sp1 = ParsStr(sp1, TAB, i_cert_rqdt);
            	sp1 = ParsStr(sp1, TAB, i_cert_seqn);
            	sp1 = ParsStr(sp1, TAB, i_ho_dong  );
            	sp1 = ParsStr(sp1, TAB, i_cert_rqnu);
            	sp1 = (char *)ParsFix5(sp1, i_cert_bigo);
            	sp1 = ParsStr(sp1, TAB, i_fkinp1001);
            	sp1 = ParsStr(sp1, TAB, i_cert_wrgb);
            	
            	lprintf("i_bunho     : [%s]\n", i_bunho    );
                lprintf("i_pkdoc1001 : [%s]\n", i_pkdoc1001);
                lprintf("i_cert_jncd : [%s]\n", i_cert_jncd);
                lprintf("i_gwa       : [%s]\n", i_gwa      );
                lprintf("i_cert_rqdt : [%s]\n", i_cert_rqdt);
                lprintf("i_cert_seqn : [%s]\n", i_cert_seqn);
                lprintf("i_ho_dong   : [%s]\n", i_ho_dong  );
                lprintf("i_cert_rqnu : [%s]\n", i_cert_rqnu);
                lprintf("i_cert_bigo : [%s]\n", i_cert_bigo);
                lprintf("i_fkinp1001 : [%s]\n", i_fkinp1001);
                lprintf("i_cert_wrgb : [%s]\n", i_cert_wrgb);
                
                if(sp1 == NULL)
                    return (SysErr(MessageOut,"99991","Record Parsing Error",NULL,1));

                TrimStr(i_bunho    );
                TrimStr(i_pkdoc1001);
                TrimStr(i_cert_jncd);
                TrimStr(i_gwa      );
                TrimStr(i_cert_rqdt);
                TrimStr(i_cert_seqn);
                TrimStr(i_ho_dong  );
                TrimStr(i_cert_rqnu);
                TrimStr(i_cert_bigo);
                TrimStr(i_fkinp1001);
                TrimStr(i_cert_wrgb);
                
                /* 중복체크 */
                EXEC SQL
                SELECT 'Y'
                  INTO :o_dup_chck
                  FROM DUAL
                 WHERE EXISTS (SELECT 'X'
                                 FROM DOC1001
                                WHERE BUNHO     = :i_bunho
                                  AND PKDOC1001 = :i_pkdoc1001
                                  AND CERT_JNCD = :i_cert_jncd
                                  AND GWA       = :i_gwa
                                  AND CERT_RQDT = TO_DATE(:i_cert_rqdt, 'YYYY/MM/DD')
                                  AND CERT_SEQN = :i_cert_seqn);
                                  
                if(sqlca.sqlcode == 0 && rec[1] == 'I')
                {
                    return (SqlErr(MessageOut, "Insert Error", 1));
                }
                else if(sqlca.sqlcode == EXC_NO_DATA_FOUND)
                {
                    if(rec[1] == 'U')
                        return (SqlErr(MessageOut, "Update Error", 1));
                    else if(rec[1] == 'D')
                        return (SqlErr(MessageOut, "Delete Error", 1));
                }
                
                /* INSERT/UPDATE/DELETE Work Division */
                switch(rec[1])
                {
                    /* INSERT */
                    case 'I':
                    	if(atoi(i_cert_seqn) == 0)
                        {
                            /* 순번을 찾는다 */
                            EXEC SQL
                            SELECT NVL(MAX(CERT_SEQN) + 1, 1) CERT_SEQN
                              INTO :i_cert_seqn
                              FROM DOC1001
                             WHERE BUNHO     = :i_bunho
                               AND PKDOC1001 = :i_pkdoc1001
                               AND CERT_JNCD = :i_cert_jncd
                               AND GWA       = :i_gwa
                               AND CERT_RQDT = TO_DATE(:i_cert_rqdt, 'YYYY/MM/DD');
                            
                            if (sqlca.sqlcode != 0)
                            return (SqlErr(MessageOut, NULL, 1));
                                    
                            lprintf("i_cert_seqn : [%s]...\n", i_cert_seqn);
                        }
                        
                        /* 제증명 요청건 저장 */
                        EXEC SQL
                        INSERT INTO DOC1001 (SYS_DATE    , USER_ID     , UPD_DATE    ,
                                             BUNHO       , PKDOC1001   , CERT_JNCD   ,
                                             GWA         , CERT_RQDT   , CERT_SEQN   ,
                                             CERT_VALD   , CERT_IOGB   , HO_DONG     ,
                                             CERT_RQNU   , CERT_BIGO   , CERT_WRDT   ,
                                             CERT_WRGB   , CERT_WRID   ,CERT_PRGB    ,
                                             FKINP1001   , FKOUT1001)        
                        VALUES              (SYSDATE     , :q_user_id  , SYSDATE     ,
                                             :i_bunho    , :i_pkdoc1001, :i_cert_jncd,
                                             :i_gwa      , :i_cert_rqdt, :i_cert_seqn,
                                             'Y'         , 'I'         , :i_ho_dong  ,
                                             :i_cert_rqnu, :i_cert_bigo, ''          ,
                                             :i_cert_wrgb, ''          , ''          ,
                                             :i_fkinp1001, '');

                        if (sqlca.sqlcode != 0)
                            return (SqlErr(MessageOut,NULL, 1));

                        lprintf("DOC1001 Insert Success\n");
                        break;
                    /* UPDATE */
                    case 'U':
                    	/* 제증명 요청을 하고 난 후에는 요청매수와 비고사항만을 고칠 수 있다 */
                    	/* 그외에는 불가                                                     */
                        EXEC SQL
                        UPDATE DOC1001
                           SET USER_ID   = :q_user_id,
                               UPD_DATE  = SYSDATE,
                               CERT_RQNU = :i_cert_rqnu,
                               CERT_BIGO = :i_cert_bigo
                         WHERE BUNHO     = :i_bunho
                           AND PKDOC1001 = :i_pkdoc1001
                           AND CERT_JNCD = :i_cert_jncd
                           AND GWA       = :i_gwa
                           AND CERT_RQDT = TO_DATE(:i_cert_rqdt, 'YYYY/MM/DD')
                           AND CERT_SEQN = :i_cert_seqn;

                        if (sqlca.sqlcode != 0)
                            return (SqlErr(MessageOut,NULL, 1));

                        lprintf("DOC1001 Updatge Success\n");
                        break;
                    /* DELETE */
                    case 'D':
                        EXEC SQL
                        UPDATE DOC1001
                           SET USER_ID   = :q_user_id,
                               UPD_DATE  = SYSDATE,
                               CERT_VALD = 'N'
                         WHERE BUNHO     = :i_bunho
                           AND PKDOC1001 = :i_pkdoc1001
                           AND CERT_JNCD = :i_cert_jncd
                           AND GWA       = :i_gwa
                           AND CERT_RQDT = TO_DATE(:i_cert_rqdt, 'YYYY/MM/DD')
                           AND CERT_SEQN = :i_cert_seqn;


                        if (sqlca.sqlcode != 0)
                            return (SqlErr(MessageOut,NULL, 1));

                        lprintf("DOC1001 Delete Success\n");
                        break;
                    default:
                        return (SysErr(MessageOut,"99992","Record Work Division Error",NULL,1));
                        break;
                }
                lprintf("End DOC1001 SAVE\n");
                break;
                
            default:
                return (SysErr(MessageOut,"99992","Rec[0] Division Error",NULL, 1));
                break;
        }
    }
    return 0;
}
