//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: nuro_service.proto
// Note: requires additional types generated from: nuro_model.proto
namespace IHIS.CloudConnector.Messaging
{

  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"NuroOutOrderStatusRequest")]
  public partial class NuroOutOrderStatusRequest : global::ProtoBuf.IExtensible
  {
    public NuroOutOrderStatusRequest() {}
    
    private string _comming_date;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"comming_date", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string comming_date
    {
      get { return _comming_date; }
      set { _comming_date = value; }
    }
    private string _deparment_code;
    [global::ProtoBuf.ProtoMember(2, IsRequired = true, Name=@"deparment_code", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string deparment_code
    {
      get { return _deparment_code; }
      set { _deparment_code = value; }
    }
    private string _patient_code;
    [global::ProtoBuf.ProtoMember(3, IsRequired = true, Name=@"patient_code", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string patient_code
    {
      get { return _patient_code; }
      set { _patient_code = value; }
    }
    private string _language;
    [global::ProtoBuf.ProtoMember(4, IsRequired = true, Name=@"language", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public string language
    {
      get { return _language; }
      set { _language = value; }
    }
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}
